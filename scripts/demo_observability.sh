#!/bin/bash

# Script de d√©monstration pour l'observabilit√©
# Ce script lance diff√©rents types de tests pour faire bouger les graphiques

APP_URL="http://34.69.67.242:5000"
PROMETHEUS_URL="http://35.224.152.222:9090"
GRAFANA_URL="http://34.59.124.63:3000"

echo "üéØ D√âMONSTRATION OBSERVABILIT√â"
echo "=============================="
echo ""
echo "üåê URLs d'acc√®s:"
echo "‚Ä¢ Application Flask: $APP_URL"
echo "‚Ä¢ Prometheus: $PROMETHEUS_URL"
echo "‚Ä¢ Grafana: $GRAFANA_URL"
echo ""

# Fonction pour afficher les statistiques
show_stats() {
    echo "üìä Statistiques actuelles:"
    echo "========================="
    curl -s "$APP_URL/stats" | python3 -m json.tool 2>/dev/null || echo "Impossible de r√©cup√©rer les stats"
    echo ""
}

# Fonction pour afficher les m√©triques Prometheus
show_prometheus_metrics() {
    echo "üîç M√©triques Prometheus:"
    echo "======================="
    
    echo "‚Ä¢ Requ√™tes totales:"
    curl -s "$PROMETHEUS_URL/api/v1/query?query=flask_requests_total" | python3 -c "
import json, sys
data = json.load(sys.stdin)
if 'data' in data and 'result' in data['data']:
    for result in data['data']['result']:
        metric = result['metric']
        value = result['value'][1]
        print(f'  - {metric[\"endpoint\"]} ({metric[\"status\"]}): {value}')
" 2>/dev/null || echo "  Impossible de r√©cup√©rer les m√©triques"
    
    echo ""
    echo "‚Ä¢ Erreurs par type:"
    curl -s "$PROMETHEUS_URL/api/v1/query?query=flask_errors_total" | python3 -c "
import json, sys
data = json.load(sys.stdin)
if 'data' in data and 'result' in data['data']:
    for result in data['data']['result']:
        metric = result['metric']
        value = result['value'][1]
        print(f'  - {metric[\"error_type\"]}: {value}')
" 2>/dev/null || echo "  Impossible de r√©cup√©rer les m√©triques d'erreur"
    
    echo ""
    echo "‚Ä¢ Taux d'erreur:"
    curl -s "$PROMETHEUS_URL/api/v1/query?query=flask_error_rate" | python3 -c "
import json, sys
data = json.load(sys.stdin)
if 'data' in data and 'result' in data['data']:
    for result in data['data']['result']:
        value = result['value'][1]
        print(f'  - Taux d'erreur actuel: {value}%')
" 2>/dev/null || echo "  Impossible de r√©cup√©rer le taux d'erreur"
    
    echo ""
}

# Fonction pour g√©n√©rer du trafic de base
generate_baseline_traffic() {
    echo "üöÄ Phase 1: G√©n√©ration de trafic de base (30 requ√™tes)"
    echo "====================================================="
    
    for i in {1..30}; do
        case $((RANDOM % 4)) in
            0) curl -s "$APP_URL/" > /dev/null ;;
            1) curl -s "$APP_URL/health" > /dev/null ;;
            2) curl -s "$APP_URL/stats" > /dev/null ;;
            3) curl -s "$APP_URL/error" > /dev/null ;;
        esac
        
        if [ $((i % 10)) -eq 0 ]; then
            echo "  üìä $i requ√™tes effectu√©es..."
        fi
        
        sleep 0.5
    done
    
    echo "‚úÖ Trafic de base termin√©"
    echo ""
    show_stats
    echo ""
}

# Fonction pour g√©n√©rer des pics d'erreurs
generate_error_spike() {
    echo "‚ùå Phase 2: G√©n√©ration de pics d'erreurs (20 requ√™tes vers /error)"
    echo "================================================================="
    
    for i in {1..20}; do
        curl -s "$APP_URL/error" > /dev/null
        echo "  ‚ùå Erreur $i g√©n√©r√©e"
        sleep 0.3
    done
    
    echo "‚úÖ Pics d'erreurs termin√©s"
    echo ""
    show_stats
    echo ""
}

# Fonction pour g√©n√©rer des timeouts
generate_timeout_spike() {
    echo "üêå Phase 3: G√©n√©ration de timeouts (15 requ√™tes vers /slow)"
    echo "=========================================================="
    
    for i in {1..15}; do
        curl -s "$APP_URL/slow" > /dev/null
        echo "  üêå Requ√™te lente $i"
        sleep 0.4
    done
    
    echo "‚úÖ Timeouts termin√©s"
    echo ""
    show_stats
    echo ""
}

# Fonction pour g√©n√©rer du trafic intense
generate_intense_traffic() {
    echo "‚ö° Phase 4: Trafic intense (50 requ√™tes rapides)"
    echo "==============================================="
    
    for i in {1..50}; do
        case $((RANDOM % 5)) in
            0) curl -s "$APP_URL/" > /dev/null ;;
            1) curl -s "$APP_URL/health" > /dev/null ;;
            2) curl -s "$APP_URL/stats" > /dev/null ;;
            3) curl -s "$APP_URL/error" > /dev/null ;;
            4) curl -s "$APP_URL/slow" > /dev/null ;;
        esac
        
        if [ $((i % 10)) -eq 0 ]; then
            echo "  ‚ö° $i requ√™tes rapides effectu√©es..."
        fi
        
        sleep 0.1
    done
    
    echo "‚úÖ Trafic intense termin√©"
    echo ""
    show_stats
    echo ""
}

# Fonction pour afficher les instructions Grafana
show_grafana_instructions() {
    echo "üìä INSTRUCTIONS POUR GRAFANA"
    echo "============================"
    echo ""
    echo "1. Ouvrez Grafana: $GRAFANA_URL"
    echo "2. Connectez-vous avec admin/admin"
    echo "3. Allez dans 'Explore' ou cr√©ez un nouveau dashboard"
    echo "4. Utilisez ces requ√™tes Prometheus:"
    echo ""
    echo "   ‚Ä¢ Requ√™tes totales:"
    echo "     sum(rate(flask_requests_total[5m]))"
    echo ""
    echo "   ‚Ä¢ Taux d'erreur:"
    echo "     flask_error_rate"
    echo ""
    echo "   ‚Ä¢ Erreurs par type:"
    echo "     sum by (error_type) (flask_errors_total)"
    echo ""
    echo "   ‚Ä¢ Temps de r√©ponse:"
    echo "     histogram_quantile(0.95, rate(flask_request_duration_seconds_bucket[5m]))"
    echo ""
    echo "5. Lancez ce script plusieurs fois pour voir les graphiques √©voluer !"
    echo ""
}

# Menu principal
show_menu() {
    echo "üéØ MENU DE D√âMONSTRATION"
    echo "========================"
    echo ""
    echo "1. Afficher les statistiques actuelles"
    echo "2. G√©n√©rer du trafic de base"
    echo "3. G√©n√©rer des pics d'erreurs"
    echo "4. G√©n√©rer des timeouts"
    echo "5. G√©n√©rer du trafic intense"
    echo "6. D√©monstration compl√®te (toutes les phases)"
    echo "7. Afficher les instructions Grafana"
    echo "8. Quitter"
    echo ""
    read -p "Choisissez une option (1-8): " choice
    
    case $choice in
        1)
            show_stats
            show_prometheus_metrics
            ;;
        2)
            generate_baseline_traffic
            ;;
        3)
            generate_error_spike
            ;;
        4)
            generate_timeout_spike
            ;;
        5)
            generate_intense_traffic
            ;;
        6)
            echo "üé¨ D√âMONSTRATION COMPL√àTE"
            echo "========================="
            echo ""
            generate_baseline_traffic
            sleep 2
            generate_error_spike
            sleep 2
            generate_timeout_spike
            sleep 2
            generate_intense_traffic
            echo "üéâ D√©monstration compl√®te termin√©e !"
            echo ""
            show_prometheus_metrics
            ;;
        7)
            show_grafana_instructions
            ;;
        8)
            echo "üëã Au revoir !"
            exit 0
            ;;
        *)
            echo "‚ùå Option invalide"
            ;;
    esac
}

# V√©rifier la connectivit√©
echo "üîç Test de connectivit√©..."
if ! curl -s --connect-timeout 5 "$APP_URL/health" > /dev/null; then
    echo "‚ùå Application non accessible. V√©rifiez que l'application est d√©marr√©e."
    exit 1
fi
echo "‚úÖ Application accessible"
echo ""

# Boucle principale
while true; do
    show_menu
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    echo ""
done
